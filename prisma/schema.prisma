generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id             String           @id @default(cuid())
  email          String           @unique
  name           String?
  username       String?          @unique
  faithTradition String?
  country        String?
  solanaAddress  String?
  passwordHash   String?
  acceptedTerms  Boolean          @default(false)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  avatarUrl      String?
  bio            String?
  isBlocked      Boolean          @default(false) 
  reportCount    Int              @default(0)

  walletBalance      Decimal          @default(0.00) @db.Decimal(10,2)
  bscAddress         String?          @db.VarChar(191)
  isAddressVerified  Boolean          @default(false)
  transactions       TokenTransaction[]

  prayerRequests   PrayerRequest[]
  prayerResponses  PrayerResponse[]
  prayerResponseReports PrayerResponseReport[]
  homePrayerCardReports HomePrayerCardReport[]
  homePrayerCards  HomePrayerCard[] 
  resetToken       String?   @db.VarChar(255)
  resetTokenExpiry DateTime?
}

model PrayerRequest {
  id          String          @id @default(cuid())
  slug        String          @unique
  title       String
  description String
  status      PrayerStatus    @default(DRAFT)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  ownerId     String?
  owner       User?           @relation(fields: [ownerId], references: [id])

  responses   PrayerResponse[]
}

model PrayerResponse {
  id            String   @id @default(cuid())
  message       String
  voiceUrl      String?                // ✅ 錄音檔 URL
  tokensAwarded Decimal  @default(0) @db.Decimal(10,2)
  isSettled    Boolean  @default(false)
  isAnonymous   Boolean  @default(false)
  isBlocked     Boolean  @default(false) // ✅ 封鎖
  reportCount   Int      @default(0)     // ✅ 檢舉次數
  createdAt     DateTime @default(now())

  // 舊系統：對應 PrayerRequest
  prayerRequestId String?
  prayerRequest   PrayerRequest? @relation(fields: [prayerRequestId], references: [id])

  // 新系統：對應 HomePrayerCard
  homeCardId Int?
  homeCard   HomePrayerCard? @relation(fields: [homeCardId], references: [id])

  // 作者（回覆者）
  responderId String?
  responder   User? @relation(fields: [responderId], references: [id])
  tokenTransactions TokenTransaction[] @relation("PrayerResponseTransactions")
  reports        PrayerResponseReport[]
}

model HomePrayerCardReport {
  id          Int             @id @default(autoincrement())
  cardId      Int
  card        HomePrayerCard  @relation(fields: [cardId], references: [id], onDelete: Cascade)
  reporterId  String
  reporter    User            @relation(fields: [reporterId], references: [id])
  reason      String
  remarks     String?
  createdAt   DateTime        @default(now())

  @@index([cardId])
  @@index([reason])
  @@index([createdAt])
  @@unique([cardId, reporterId])
  @@map("home_prayer_card_report")
}

model PrayerResponseReport {
  id          Int             @id @default(autoincrement())
  responseId  String
  response    PrayerResponse  @relation(fields: [responseId], references: [id], onDelete: Cascade)
  reporterId  String
  reporter    User            @relation(fields: [reporterId], references: [id])
  reason      String
  remarks     String?
  createdAt   DateTime        @default(now())

  @@index([responseId])
  @@index([reason])
  @@index([createdAt])
  @@unique([responseId, reporterId])
  @@map("prayer_response_report")
}



enum PrayerStatus {
  DRAFT
  PUBLISHED
  ANSWERED
  ARCHIVED
}

model SiteBanner {
  id                Int      @id @default(autoincrement())
  eyebrow           String?  @db.VarChar(191)
  headline          String
  subheadline       String
  description       String
  primaryCtaLabel   String
  primaryCtaHref    String
  secondaryCtaLabel String?  @db.VarChar(191)
  secondaryCtaHref  String?  @db.VarChar(191)
  heroImage         String?
  isActive          Boolean  @default(true)  // ✅ 是否啟用（前台要顯示哪一個）
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@map("site_banner")
}


model HomePrayerCategory {
  id          Int               @id @default(autoincrement())
  name        String
  slug        String            @unique
  description String?
  sortOrder   Int               @default(0)
  isActive    Boolean           @default(true)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @default(now()) @updatedAt
  cards       HomePrayerCard[]

  @@map("home_prayer_category")
}

model HomePrayerCard {
  id           Int                @id @default(autoincrement())
  slug         String             @unique
  image        String
  alt          String?
  title        String
  description  String
  tags         Json
  meta         Json
  detailsHref  String
  voiceHref    String?
  sortOrder    Int                @default(0)
  categoryId   Int
  category     HomePrayerCategory @relation(fields: [categoryId], references: [id])
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @default(now()) @updatedAt

  // 上傳者 (作者)
  ownerId      String?
  owner        User?              @relation(fields: [ownerId], references: [id])

  responses    PrayerResponse[]
  tokenTransactions TokenTransaction[] @relation("HomePrayerCardTransactions")
  reports      HomePrayerCardReport[]

  // ✅ 保留封鎖與檢舉
  isBlocked    Boolean            @default(false)
  reportCount  Int                @default(0)
  isSettled    Boolean            @default(false)
  settledAmount Decimal?          @db.Decimal(10,2)

  @@map("home_prayer_card")
  @@index([categoryId])
}



enum TransactionType {
  EARN_PRAYER
  EARN_RESPONSE
  WITHDRAW
  DONATE
}

enum TransactionStatus {
  PENDING
  PROCESSING_CHAIN
  COMPLETED
  FAILED
}

enum AdminLogCategory {
  ACTION
  SYSTEM
}

enum AdminLogLevel {
  INFO
  WARNING
  ERROR
  CRITICAL
}

enum AdminRole {
  SUPER
  ADMIN
}

model AdminAccount {
  id           String    @id @default(cuid())
  username     String    @unique
  passwordHash String
  role         AdminRole @default(ADMIN)
  isActive     Boolean   @default(true)
  lastLoginAt  DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model TokenTransaction {
  id                String             @id @default(cuid())
  userId            String
  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  type              TransactionType
  status            TransactionStatus  @default(PENDING)
  amount            Decimal            @db.Decimal(10,2)
  relatedHomeCardId Int?
  relatedHomeCard   HomePrayerCard?    @relation("HomePrayerCardTransactions", fields: [relatedHomeCardId], references: [id])
  relatedResponseId String?
  relatedResponse   PrayerResponse?    @relation("PrayerResponseTransactions", fields: [relatedResponseId], references: [id])
  txHash            String?            @db.VarChar(191)
  targetAddress     String?            @db.VarChar(191)
  gasFee            Decimal?           @db.Decimal(10,8)
  metadata          Json?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt

  @@map("token_transaction")
  @@index([userId, createdAt])
  @@index([type, status])
}

model AdminLog {
  id           Int               @id @default(autoincrement())
  category     AdminLogCategory
  level        AdminLogLevel     @default(INFO)
  message      String
  action       String?
  actorId      String?
  actorEmail   String?
  targetType   String?
  targetId     String?
  requestPath  String?
  metadata     Json?
  createdAt    DateTime          @default(now())

  @@map("admin_log")
  @@index([category, createdAt])
  @@index([createdAt])
}
